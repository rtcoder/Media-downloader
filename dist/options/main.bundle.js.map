{"version":3,"file":"options/main.bundle.js","mappings":"mBAAO,IAAIA,EAMAC,GALX,SAAWD,GACPA,EAAiB,MAAI,QACrBA,EAAgB,KAAI,OACpBA,EAAkB,OAAI,QACzB,CAJD,CAIGA,IAAcA,EAAY,CAAC,IAE9B,SAAWC,GACPA,EAAyB,MAAI,QAC7BA,EAA8B,WAAI,YACrC,CAHD,CAGGA,IAAsBA,EAAoB,CAAC,IACvC,MAAMC,EAAmB,CAC5BC,MAAOH,EAAUI,OACjBC,cAAeJ,EAAkBK,MACjCC,gBAAiB,KACjBC,mBAAmB,GAEVC,EAAwBC,OAAOC,KAAKT,GCqK1C,SAASU,EAAEC,GACd,OAAOC,SAASC,cAAcF,EAClC,CC9KA,SAASG,EAAiBC,GACtBP,OAAOC,KAAKM,GACPC,SAASC,KDkMX,SAAuBC,EAAIC,GAC9B,MAAMC,EAAWR,SAASS,kBAAkBH,GAC5C,IAAKE,EAASE,OACV,OAEJ,MAAMC,EAAUH,EAASI,KAAK,GACzBD,IAGgC,UAAjCA,EAAQE,aAAa,QAKY,aAAjCF,EAAQE,aAAa,QAIzBF,EAAQJ,MAAQA,EAHZI,EAAQG,QAAUP,EALGT,EAAE,eAAeQ,cAAeC,OACxCO,SAAU,EAQ/B,CCnNQC,CAAcV,EADAF,EAAKE,IAAQjB,EAAiBiB,GACnB,GAEjC,CACA,SAASW,ICyDF,IAAyBC,EAAKC,EAALD,EDvEhC,WACI,MAAME,EAAa,CAAC,EAIpB,OAHAxB,EAAsBS,SAAQC,IAC1Bc,EAAWd,GDmLZ,SAAuBC,GAC1B,MAAME,EAAWR,SAASS,kBAAkBH,GAC5C,IAAKE,EAASE,OACV,OAEJ,MAAMC,EAAUH,EAASI,KAAK,GAC9B,OAAKD,EAGAA,EAGgC,UAAjCA,EAAQE,aAAa,QACAf,EAAE,eAAeQ,eAClBC,MAEa,aAAjCI,EAAQE,aAAa,QACdF,EAAQG,QAEZH,EAAQJ,MATJ,UAJX,CAcJ,CCvM0Ba,CAAcf,EAAI,IAEjCc,CACX,CASoBE,ICwDiBH,EDxDI,KACjC,MAAMI,EAASxB,EAAE,WACjBwB,EAAOC,MAAMC,QAAU,QACvBC,YAAW,KACPH,EAAOC,MAAMG,eAAe,UAAU,GACvC,IAAK,GCqDRC,OAAOC,QAAQC,KAAKC,IAAIb,EAAKC,GAG7BS,OAAOC,QAAQC,KAAKC,IAAIb,EDtDhC,CAIAnB,EAAE,gBACGiC,iBAAiB,UAAWC,IAC7BA,EAAMC,iBACNjB,GAAa,IAEjBhB,SAAS+B,iBAAiB,oBAR1B,WC6CO,IAAyBd,EAAKC,EAALD,ED5CZ7B,EC4CiB8B,ED5CChB,EC6ClCyB,OAAOC,QAAQC,KAAKK,IAAIjB,EAAKC,ED5CjC,G","sources":["webpack://media-downloader/./src/storage/storage-def.ts","webpack://media-downloader/./src/utils/dom-functions.ts","webpack://media-downloader/./src/options/main.ts","webpack://media-downloader/./src/utils/chrome-api.ts"],"sourcesContent":["export var ThemeType;\n(function (ThemeType) {\n    ThemeType[\"LIGHT\"] = \"light\";\n    ThemeType[\"DARK\"] = \"dark\";\n    ThemeType[\"SYSTEM\"] = \"system\";\n})(ThemeType || (ThemeType = {}));\nexport var DefaultActionType;\n(function (DefaultActionType) {\n    DefaultActionType[\"POPUP\"] = \"popup\";\n    DefaultActionType[\"SIDE_PANEL\"] = \"side-panel\";\n})(DefaultActionType || (DefaultActionType = {}));\nexport const DEFAULT_SETTINGS = {\n    theme: ThemeType.SYSTEM,\n    defaultAction: DefaultActionType.POPUP,\n    previousVersion: null,\n    showChangelogLink: false,\n};\nexport const DEFAULT_SETTINGS_KEYS = Object.keys(DEFAULT_SETTINGS);\n","export function setDisabled(selector, value) {\n    q(selector).disabled = value;\n}\nexport function toggleClass(selector, className, toggleValue = null) {\n    let elements = [];\n    if (typeof selector === 'string') {\n        elements = qAll(selector);\n    }\n    else if (Array.isArray(selector)) {\n        elements = [...selector];\n    }\n    else {\n        elements = [selector];\n    }\n    if (!elements.length) {\n        return;\n    }\n    if (toggleValue === null) {\n        [...elements].forEach(element => {\n            if (element.classList.contains(className)) {\n                element.classList.remove(className);\n            }\n            else {\n                element.classList.add(className);\n            }\n        });\n    }\n    else {\n        if (toggleValue) {\n            [...elements].forEach(element => element.classList.add(className));\n        }\n        else {\n            [...elements].forEach(element => element.classList.remove(className));\n        }\n    }\n}\nexport function hasClass(selector, className) {\n    let element;\n    if (typeof selector === 'string') {\n        element = q(selector);\n    }\n    else {\n        element = selector;\n    }\n    if (!element) {\n        return false;\n    }\n    return element.classList.contains(className);\n}\n/**\n * @typedef {Object} Props\n * @property {string|string[]} [class] - A string or an array of strings representing the class(es) to be added to the element.\n * @property {string} [html] - The HTML content to be set as the innerHTML of the element.\n * @property {{[key: string]: string|number}} [attributes] - An object representing additional attributes to set on the element.\n * @property {{[key: string]: string|number}} [data] - An object representing additional data attributes to set on the element.\n * @property {string} [type] - The type attribute to be set on the element (useful for elements like `input`).\n * @property {string} [title] - The title attribute to be set on the element.\n * @property {string} [alt] - The alt attribute to be set on the element.\n * @property {string} [src] - The src attribute to be set on the element.\n */\n/**\n * Creates a new DOM element with the specified tag name and properties.\n *\n * @param {keyof HTMLElementTagNameMap} tagName - The name of the tag for the element to be created (e.g., 'div', 'span').\n * @param {Props} [props] - An object containing properties to set on the element.\n * @param {Children} [children] - Children nodes to be appended to the created element.\n * @returns {HTMLElement} The newly created DOM element.\n */\nexport function createElement(tagName, props = {}, children = []) {\n    const element = document.createElement(tagName);\n    if (props.class) {\n        if (typeof props.class === 'string') {\n            element.classList.add(props.class);\n        }\n        else {\n            element.classList.add(...props.class);\n        }\n    }\n    if (props.html) {\n        element.innerHTML = props.html || '';\n    }\n    if (props.attributes) {\n        for (const [attr, value] of Object.entries(props.attributes)) {\n            element.setAttribute(attr, value);\n        }\n    }\n    if (props.data) {\n        for (const [attr, value] of Object.entries(props.data)) {\n            element.setAttribute(`data-${attr}`, value);\n        }\n    }\n    if (props.type) {\n        element.type = props.type;\n    }\n    if (props.title) {\n        element.title = props.title;\n    }\n    if (props.alt) {\n        element.alt = props.alt;\n    }\n    if (props.src) {\n        element.src = props.src;\n    }\n    if (children) {\n        if (!Array.isArray(children) && children instanceof HTMLElement) {\n            children = [children];\n        }\n        element.append(...children);\n    }\n    return element;\n}\n/**\n * Creates a new DOM element with the specified tag name and properties.\n *\n * @param {Props} [props] - An object containing properties to set on the element.\n * @param {Children} [children] - Children nodes to be appended to the created element.\n * @returns {HTMLDivElement} The newly created DOM element.\n */\nexport function createDivElement(props = {}, children = []) {\n    return createElement('div', props, children);\n}\n/**\n * Creates a new DOM element with the specified tag name and properties.\n *\n * @param {Props} [props] - An object containing properties to set on the element.\n * @param {Children} [children] - Children nodes to be appended to the created element.\n * @returns {HTMLSpanElement} The newly created DOM element.\n */\nexport function createSpanElement(props = {}, children = []) {\n    return createElement('span', props, children);\n}\n/**\n * Creates a new DOM element with the specified tag name and properties.\n *\n * @param {Props} [props] - An object containing properties to set on the element.\n * @param {Children} [children] - Children nodes to be appended to the created element.\n * @returns {HTMLButtonElement} The newly created DOM element.\n */\nexport function createButtonElement(props = {}, children = []) {\n    props.type = 'button';\n    return createElement('button', props, children);\n}\n/**\n * Creates a new DOM element with the specified tag name and properties.\n *\n * @param {Props} [props] - An object containing properties to set on the element.\n * @returns {HTMLImageElement} The newly created DOM element.\n */\nexport function createImgElement(props = {}) {\n    return createElement('img', props);\n}\nexport function createIconElement(name, size = 24) {\n    return createSpanElement({\n        html: name,\n        class: 'x-icon',\n        attributes: {\n            size,\n        },\n    });\n}\nexport function show(selector) {\n    const el = typeof selector === 'string'\n        ? q(selector)\n        : selector;\n    if (el) {\n        el.hidden = false;\n    }\n}\nexport function hide(selector) {\n    const el = typeof selector === 'string'\n        ? q(selector)\n        : selector;\n    if (el) {\n        el.hidden = true;\n    }\n}\nexport function qAll(selector) {\n    const data = [];\n    const els = document.querySelectorAll(selector);\n    els.forEach((el) => data.push(el));\n    return els;\n}\nexport function q(selector) {\n    return document.querySelector(selector);\n}\nexport function getInputValue(id) {\n    const elements = document.getElementsByName(id);\n    if (!elements.length) {\n        return;\n    }\n    const element = elements.item(0);\n    if (!element) {\n        return;\n    }\n    if (!element) {\n        return null;\n    }\n    if (element.getAttribute('type') === 'radio') {\n        const radioElement = q(`input[name=\"${id}\"]:checked`);\n        return radioElement.value;\n    }\n    if (element.getAttribute('type') === 'checkbox') {\n        return element.checked;\n    }\n    return element.value;\n}\nexport function setInputValue(id, value) {\n    const elements = document.getElementsByName(id);\n    if (!elements.length) {\n        return;\n    }\n    const element = elements.item(0);\n    if (!element) {\n        return;\n    }\n    if (element.getAttribute('type') === 'radio') {\n        const radioElement = q(`input[name=\"${id}\"][value=\"${value}\"]`);\n        radioElement.checked = true;\n        return;\n    }\n    if (element.getAttribute('type') === 'checkbox') {\n        element.checked = value;\n        return;\n    }\n    element.value = value;\n}\n","import { DEFAULT_SETTINGS, DEFAULT_SETTINGS_KEYS } from '../storage/storage-def';\nimport { getStorageValue, setStorageValue } from '../utils/chrome-api';\nimport { getInputValue, q, setInputValue } from '../utils/dom-functions';\nfunction composeDataToSave() {\n    const dataToSave = {};\n    DEFAULT_SETTINGS_KEYS.forEach(key => {\n        dataToSave[key] = getInputValue(key);\n    });\n    return dataToSave;\n}\nfunction fillFormWithData(data) {\n    Object.keys(data)\n        .forEach((key) => {\n        const value = data[key] || DEFAULT_SETTINGS[key];\n        setInputValue(key, value);\n    });\n}\nfunction saveOptions() {\n    setStorageValue(composeDataToSave(), () => {\n        const status = q('#status');\n        status.style.display = 'block';\n        setTimeout(() => {\n            status.style.removeProperty('display');\n        }, 2000);\n    });\n}\nfunction restoreOptions() {\n    getStorageValue(DEFAULT_SETTINGS, fillFormWithData);\n}\nq('#optionsForm')\n    .addEventListener('submit', (event) => {\n    event.preventDefault();\n    saveOptions();\n});\ndocument.addEventListener('DOMContentLoaded', restoreOptions);\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nexport function executeContentScript(scriptUrl_1) {\n    return __awaiter(this, arguments, void 0, function* (scriptUrl, tabId = null) {\n        if (!tabId) {\n            const tab = yield getCurrentTab();\n            if (!tab || !tab.id) {\n                return;\n            }\n            if (tab.id <= 0) {\n                return;\n            }\n            tabId = tab.id;\n        }\n        yield chrome.scripting.executeScript({\n            target: { tabId, allFrames: true },\n            files: [scriptUrl],\n        });\n    });\n}\nexport function getCurrentTab() {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            let queryOptions = { active: true, lastFocusedWindow: true };\n            let [tab] = yield chrome.tabs.query(queryOptions);\n            console.log('current tabUrl: ', tab === null || tab === void 0 ? void 0 : tab.url, tab);\n            if (!(tab === null || tab === void 0 ? void 0 : tab.url) || ((_a = tab === null || tab === void 0 ? void 0 : tab.url) === null || _a === void 0 ? void 0 : _a.startsWith('chrome://')) || ((_b = tab === null || tab === void 0 ? void 0 : tab.url) === null || _b === void 0 ? void 0 : _b.startsWith('https://chromewebstore.google.com'))) {\n                return null;\n            }\n            return tab;\n        }\n        catch (_c) {\n            return null;\n        }\n    });\n}\nexport function getTab(tabId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n        try {\n            const tab = yield chrome.tabs.get(tabId);\n            if (chrome.runtime.lastError) {\n                console.error('Error get tab by ID:', chrome.runtime.lastError);\n                return null;\n            }\n            console.log('tabUrl: ', tab === null || tab === void 0 ? void 0 : tab.url);\n            if (!(tab === null || tab === void 0 ? void 0 : tab.url) || ((_a = tab === null || tab === void 0 ? void 0 : tab.url) === null || _a === void 0 ? void 0 : _a.startsWith('chrome://')) || ((_b = tab === null || tab === void 0 ? void 0 : tab.url) === null || _b === void 0 ? void 0 : _b.startsWith('https://chromewebstore.google.com'))) {\n                return null;\n            }\n            return tab;\n        }\n        catch (_c) {\n            return null;\n        }\n    });\n}\nexport function downloadUrl(url, filename = null) {\n    const downloadOptions = { url };\n    if (filename) {\n        downloadOptions.filename = filename;\n    }\n    chrome.downloads.download(downloadOptions);\n}\nexport function getStorageValue(obj, callback) {\n    chrome.storage.sync.get(obj, callback);\n}\nexport function setStorageValue(obj, callback) {\n    if (callback) {\n        chrome.storage.sync.set(obj, callback);\n    }\n    else {\n        chrome.storage.sync.set(obj);\n    }\n}\nexport function sendMessage(eventName, data) {\n    try {\n        chrome.runtime.sendMessage({ eventName, data }, (response) => {\n        });\n    }\n    catch (_a) {\n        // do nothing\n    }\n}\nexport function onMessage(callback) {\n    chrome.runtime.onMessage.addListener(callback);\n}\nexport function createTab(details) {\n    chrome.tabs.create(details);\n}\nexport function setPopupOptions(options) {\n    chrome.action.setPopup(options);\n}\nexport function setSidePanelOptions(options) {\n    chrome.sidePanel.setOptions(options);\n}\nexport function setSidePanelBehavior(options) {\n    chrome.sidePanel.setPanelBehavior(options).catch((error) => console.log(error));\n}\nexport function contextMenuClicked(callback) {\n    chrome.contextMenus.onClicked.addListener((info, tab) => {\n        if (!tab) {\n            return;\n        }\n        callback(info, tab);\n    });\n}\nexport function onInstalled(callback) {\n    chrome.runtime.onInstalled.addListener(callback);\n}\nexport function createContextMenu(properties) {\n    chrome.contextMenus.create(properties);\n}\nexport function onCreateTab(callback) {\n    chrome.tabs.onCreated.addListener(callback);\n}\nexport function onReplaceTab(callback) {\n    chrome.tabs.onReplaced.addListener(callback);\n}\nexport function onActivateTab(callback) {\n    chrome.tabs.onActivated.addListener(callback);\n}\nexport function onUpdateTab(callback) {\n    chrome.tabs.onUpdated.addListener(callback);\n}\nexport function onClickExtensionIcon(callback) {\n    chrome.action.onClicked.addListener(callback);\n}\nexport function openPopup(options) {\n    chrome.action.openPopup(options);\n}\nexport function openSidePanel(options) {\n    chrome.sidePanel.open(options);\n}\nexport function getVersion() {\n    return chrome.runtime.getManifest().version;\n}\n"],"names":["ThemeType","DefaultActionType","DEFAULT_SETTINGS","theme","SYSTEM","defaultAction","POPUP","previousVersion","showChangelogLink","DEFAULT_SETTINGS_KEYS","Object","keys","q","selector","document","querySelector","fillFormWithData","data","forEach","key","id","value","elements","getElementsByName","length","element","item","getAttribute","checked","setInputValue","saveOptions","obj","callback","dataToSave","getInputValue","composeDataToSave","status","style","display","setTimeout","removeProperty","chrome","storage","sync","set","addEventListener","event","preventDefault","get"],"sourceRoot":""}